<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Woof.System</name>
    </assembly>
    <members>
        <member name="T:Woof.SystemEx.HostsFile">
            <summary>
            Represents system hosts file.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.HostsFile.Item(System.String)">
            <summary>
            Gets the IP pointed with the host name specified if exists. Null otherwise.
            </summary>
            <param name="hostName"></param>
            <returns></returns>
        </member>
        <member name="P:Woof.SystemEx.HostsFile.IsModified">
            <summary>
            Gets the value indicating whether the content was modified since loaded.
            </summary>
        </member>
        <member name="M:Woof.SystemEx.HostsFile.#ctor">
            <summary>
            Creates system hosts file logical representation.
            </summary>
        </member>
        <member name="M:Woof.SystemEx.HostsFile.Append(System.String,System.Net.IPAddress,System.String)">
            <summary>
            Adds a new entry at the end.
            </summary>
            <param name="hostName">Host name.</param>
            <param name="ip">Host IP address.</param>
            <param name="comment">Optional comment (without '#').</param>
        </member>
        <member name="M:Woof.SystemEx.HostsFile.Comment(System.String)">
            <summary>
            Adds a comment line at the end.
            </summary>
            <param name="text">Comment text (without '#').</param>
        </member>
        <member name="M:Woof.SystemEx.HostsFile.Exists(System.String)">
            <summary>
            Tests if specified host entry exists.
            </summary>
            <param name="hostName">Host name.</param>
            <returns>True if matching entry exists.</returns>
        </member>
        <member name="M:Woof.SystemEx.HostsFile.NewLine">
            <summary>
            Appends a new line at the end.
            </summary>
        </member>
        <member name="M:Woof.SystemEx.HostsFile.Remove(System.String)">
            <summary>
            Removes a host entry.
            </summary>
            <param name="hostName">Host name.</param>
        </member>
        <member name="M:Woof.SystemEx.HostsFile.ToString">
            <summary>
            Returns current hosts content as string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Woof.SystemEx.HostsFile.Write">
            <summary>
            Writes current hosts content to string.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.HostsFile.Target">
            <summary>
            Gets the target file path.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.HostsFile.Tokens">
            <summary>
            Current token list.
            </summary>
        </member>
        <member name="T:Woof.SystemEx.HostsFile.Host">
            <summary>
            Host entry.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.HostsFile.Host.HostName">
            <summary>
            The name attribute.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.HostsFile.Host.IP">
            <summary>
            IP address attribute.
            </summary>
        </member>
        <member name="T:Woof.SystemEx.LocalGroup">
            <summary>
            Contains local group basic informations.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.LocalGroup.LocalizedName">
            <summary>
            Gets the localized group name.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.LocalGroup.LocalizedDescription">
            <summary>
            Gets tje localized group description.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.LocalGroup.Sid">
            <summary>
            Gets the group's <see cref="T:System.Security.Principal.SecurityIdentifier"/>.
            </summary>
        </member>
        <member name="M:Woof.SystemEx.LocalGroup.#ctor(Woof.SystemEx.Win32Types.LocalGroupInfo)">
            <summary>
            Creates <see cref="T:Woof.SystemEx.LocalGroup"/> from <see cref="T:Woof.SystemEx.Win32Types.LocalGroupInfo"/>.
            </summary>
            <param name="groupInfo">Value read from Net API.</param>
        </member>
        <member name="T:Woof.SystemEx.SysInfo">
            <summary>
            Provide system information.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.Cpu">
            <summary>
            Gets all WMI data on first CPU in the system.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.CpuId">
            <summary>
            Gets first CPU ProcessorId string.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.CpuCores">
            <summary>
            Gets the number of first CPU cores.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.CpuCount">
            <summary>
            Gets the number of physical CPUs in the system.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.CpuSpeed">
            <summary>
            Gets the CPU clock speed returned as MaxClockSpeed by Win32_Processor WMI class. Can be different from actual frequency.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.IMEI">
            <summary>
            Gets IMEI (International Mobile Equipment Identity) for mobile devices, null for dekstops.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.DeviceId">
            <summary>
            Gets unique device identifier based on mobile broadband network interface IMEI, system disk serial number or concatenation of physical networ adapters MAC addresses.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.CurrentProcessUser">
            <summary>
            Gets the current process user.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.IsCurrentProcessUserAdmin">
            <summary>
            Gets a value indicating whether the current process user has actual administrative privileges.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.LogonUser">
            <summary>
            Gets the user account who actually owns the active UI session.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.LocalGroups">
            <summary>
            Gets the local groups.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.LocalAppDataDirectory">
            <summary>
            Gets local AppData directory for current user, WORKS FROM SYSTEM ACCOUNT!
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.ProfilesDirectory">
            <summary>
            Gets user profiles directory from Windows registry.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.MemoryTotal">
            <summary>
            Gets total installed RAM amount in GB.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.PhysicalMacs">
            <summary>
            Gets physical network interfaces MAC addresses (hex values delimited by ':').
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.SystemDiskSerialNumber">
            <summary>
            Gets system disk serial number, should be unique for unique devices.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.SystemMemoryFree">
            <summary>
            Gets free physical RAM in GB available to operating system.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.SystemMemoryTotal">
            <summary>
            Gets total physical RAM in GB available to operating system.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.Users">
            <summary>
            Gets all normal, enabled user accounts on the local computer.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.OperatingSystem">
            <summary>
            Gets the operating system extended information from WMI.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.WindowsProductId">
            <summary>
            Gets Windows ProductID as displayed in System Panel. 
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.WindowsDigitalProductId">
            <summary>
            Gets Windows ProductID in binary form.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.WindowsProductKey">
            <summary>
            Gets Windows Product Key if available.
            </summary>
        </member>
        <member name="M:Woof.SystemEx.SysInfo.GetProcessUser(System.Diagnostics.Process)">
            <summary>
            Gets the account of the process owner.
            </summary>
            <param name="process">Process.</param>
            <returns>Account information.</returns>
        </member>
        <member name="M:Woof.SystemEx.SysInfo.GetProcessElevated(System.Diagnostics.Process)">
            <summary>
            Gets a value indicating whether the process is elevated.
            </summary>
            <param name="process">Process.</param>
            <returns>True if elevated.</returns>
        </member>
        <member name="M:Woof.SystemEx.SysInfo.GetSecurityIdentifier(System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Security.Principal.SecurityIdentifier"/> for the user name in the system.
            </summary>
            <param name="userName">User name.</param>
            <param name="stripDomain">Set true to strip the domain from the user name. Default false.</param>
            <returns>SID or null if the user name does not exist in the system.</returns>
        </member>
        <member name="M:Woof.SystemEx.SysInfo.GetMicrosoftAccount(System.Security.Principal.SecurityIdentifier)">
            <summary>
            Gets Microsoft Account identifier (login) for specified SID from the Registry.
            </summary>
            <param name="sid">Account SID.</param>
            <returns>Microsoft Account Identifier or null if SID is not associated with a Microsoft Account.</returns>
        </member>
        <member name="M:Woof.SystemEx.SysInfo.GetMicrosoftAccount(System.String)">
            <summary>
            Gets Microsoft Account identifier (login) for specified user name from the Registry.
            </summary>
            <param name="userName">User name or null for the current user.</param>
            <returns>Microsoft Account Identifier or null if user name is not associated with a Microsoft Account.</returns>
        </member>
        <member name="M:Woof.SystemEx.SysInfo.GetUserPicturePath(System.String)">
            <summary>
            Generates and retrieves user tile path for the specified user name.
            </summary>
            <param name="userName">User name or null for the current user.</param>
            <returns>Path to the small 126x126 user account picture.</returns>
        </member>
        <member name="M:Woof.SystemEx.SysInfo.GetUserPicturePath(System.String,System.String@)">
            <summary>
            Generates and retrieves user tile path for the specified user name.
            </summary>
            <param name="userName">User name or null for the current user.</param>
            <param name="srcPath">Profile picture source path if available.</param>
            <returns>Path to the small 126x126 user account picture.</returns>
        </member>
        <member name="P:Woof.SystemEx.SysInfo.ComputerInfo">
            <summary>
            Gets cached <see cref="T:Microsoft.VisualBasic.Devices.ComputerInfo"/> instance.
            </summary>
        </member>
        <member name="M:Woof.SystemEx.SysInfo.GetIMEI">
            <summary>
            Returns IMEI of main mobile broadband network interface.
            </summary>
            <returns>IMEI or null if mobile broadband network interface is not available.</returns>
        </member>
        <member name="M:Woof.SystemEx.SysInfo.DecodeProductKey(System.Byte[])">
            <summary>
            Decodes Windows 8 and 10 product key.
            </summary>
            <param name="digitalProductId">Windows ProductID as <see cref="T:System.Byte"/>[] array.</param>
            <returns>Product key.</returns>
        </member>
        <member name="M:Woof.SystemEx.SysInfo.DecodeLegacyProductKey(System.Byte[])">
            <summary>
            Decodes legacy Windows product key.
            </summary>
            <param name="digitalProductId">Windows ProductID as <see cref="T:System.Byte"/>[] array.</param>
            <returns>Product key.</returns>
        </member>
        <member name="F:Woof.SystemEx.SysInfo.ProductKeyMap">
            <summary>
            Character map used by Windows product keys.
            </summary>
        </member>
        <member name="M:Woof.SystemEx.SysInfo.ReadNetApi``1(Woof.SystemEx.Win32Types.NetApiStatus,System.IntPtr,System.Int32)">
            <summary>
            Reads data from the Net API.
            </summary>
            <typeparam name="T">Type of the structure to read.</typeparam>
            <param name="status">One of <see cref="T:Woof.SystemEx.Win32Types.NetApiStatus"/> enumeration.</param>
            <param name="buffer">Pointer to the buffer returned by Net API.</param>
            <param name="read">The number of elements read by Net API.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Woof.SystemEx.SysInfo.GetLocalAccounts(System.Boolean)">
            <summary>
            Gets all accounts. Full information, with FullName set.
            </summary>
            <param name="withDisabled">Set true to include disabled accounts. Default false.</param>
            <returns>Accounts.</returns>
        </member>
        <member name="M:Woof.SystemEx.SysInfo.GetLocalAccounts(System.String)">
            <summary>
            Gets the local accounts within a group.
            </summary>
            <param name="localizedGroupName">Localized group name.</param>
            <returns>Local accounts.</returns>
        </member>
        <member name="M:Woof.SystemEx.SysInfo.GetLocalGroups">
            <summary>
            Gets the local groups of the local computer.
            </summary>
            <returns>Local groups.</returns>
        </member>
        <member name="M:Woof.SystemEx.SysInfo.GetSessionUserToken">
            <summary>
            Gets the user impersonation token from the currently active session.
            Do not invoke as regular user, the proper usage is from system account.
            </summary>
            <returns>Impersonation token for the active session owner.</returns>
        </member>
        <member name="M:Woof.SystemEx.Win32Imports.NativeMethods.NetApiBufferFree(System.IntPtr)">
            <summary>
            The NetApiBufferFree function frees the memory that the NetApiBufferAllocate function allocates. Applications should also call NetApiBufferFree to free the memory that other network management functions use internally to return information.
            </summary>
            <param name="bufptr">A pointer to a buffer returned previously by another network management function or memory allocated by calling the NetApiBufferAllocate function.</param>
        </member>
        <member name="M:Woof.SystemEx.Win32Imports.NativeMethods.NetLocalGroupEnum(System.String,System.Int32,System.IntPtr@,System.Int32,System.Int32@,System.Int32@,System.IntPtr)">
            <summary>
            Returns information about each local group account on the specified server.
            </summary>
            <param name="servername">Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.</param>
            <param name="level">
            0 : Return local group names.The bufptr parameter points to an array of LOCALGROUP_INFO_0 structures.<br/>
            1 : Return local group names and the comment associated with each group. The bufptr parameter points to an array of LOCALGROUP_INFO_1 structures.
            </param>
            <param name="bufptr">Pointer to the address of the buffer that receives the information structure. The format of this data depends on the value of the level parameter. This buffer is allocated by the system and must be freed using the NetApiBufferFree function. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA.</param>
            <param name="prefmaxlen">Specifies the preferred maximum length of returned data, in bytes. If you specify MAX_PREFERRED_LENGTH, the function allocates the amount of memory required for the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see Network Management Function Buffers and Network Management Function Buffer Lengths.</param>
            <param name="entriesread">Pointer to a value that receives the count of elements actually enumerated.</param>
            <param name="totalentries">Pointer to a value that receives the approximate total number of entries that could have been enumerated from the current resume position. The total number of entries is only a hint. For more information about determining the exact number of entries, see the following Remarks section.</param>
            <param name="resumeHandle">Pointer to a value that contains a resume handle that is used to continue an existing local group search. The handle should be zero on the first call and left unchanged for subsequent calls. If this parameter is NULL, then no resume handle is stored. For more information, see the following Remarks section.</param>
            <returns>If the function succeeds, the return value is NERR_Success.</returns>
        </member>
        <member name="M:Woof.SystemEx.Win32Imports.NativeMethods.NetLocalGroupGetMembers(System.String,System.String,System.Int32,System.IntPtr@,System.Int32,System.Int32@,System.Int32@,System.IntPtr)">
            <summary>
            Retrieves a list of the members of a particular local group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory. Local group members can be users or global groups.
            </summary>
            <param name="servername">Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.</param>
            <param name="localgroupname">Pointer to a constant string that specifies the name of the local group whose members are to be listed. For more information, see the following Remarks section.</param>
            <param name="level">
            0 : Return the security identifier (SID) associated with the local group member. The bufptr parameter points to an array of LOCALGROUP_MEMBERS_INFO_0 structures.<br/>
            1 : Return the SID and account information associated with the local group member. The bufptr parameter points to an array of LOCALGROUP_MEMBERS_INFO_1 structures.<br/>
            2 : Return the SID, account information, and the domain name associated with the local group member. The bufptr parameter points to an array of LOCALGROUP_MEMBERS_INFO_2 structures.<br/>
            3 : Return the account and domain names of the local group member. The bufptr parameter points to an array of LOCALGROUP_MEMBERS_INFO_3 structures.
            </param>
            <param name="bufptr">Pointer to the address that receives the return information structure. The format of this data depends on the value of the level parameter. This buffer is allocated by the system and must be freed using the NetApiBufferFree function. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA.</param>
            <param name="prefmaxlen">Specifies the preferred maximum length of returned data, in bytes. If you specify MAX_PREFERRED_LENGTH, the function allocates the amount of memory required for the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see Network Management Function Buffers and Network Management Function Buffer Lengths.</param>
            <param name="entriesread">Pointer to a value that receives the count of elements actually enumerated.</param>
            <param name="totalentries">Pointer to a value that receives the total number of entries that could have been enumerated from the current resume position.</param>
            <param name="resumeHandle">Pointer to a value that contains a resume handle which is used to continue an existing group member search. The handle should be zero on the first call and left unchanged for subsequent calls. If this parameter is NULL, then no resume handle is stored.</param>
            <returns>If the function succeeds, the return value is NERR_Success.</returns>
        </member>
        <member name="M:Woof.SystemEx.Win32Imports.NativeMethods.NetUserEnum(System.String,System.Int32,Woof.SystemEx.Win32Types.NetApiFilter,System.IntPtr@,System.Int32,System.Int32@,System.Int32@,System.IntPtr)">
            <summary>
            Retrieves information about all user accounts on a server.
            </summary>
            <param name="servername">A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.</param>
            <param name="level">
            0 : Return user account names. The bufptr parameter points to an array of USER_INFO_0 structures.<br/>
            1 : Return detailed information about user accounts. The bufptr parameter points to an array of USER_INFO_1 structures.<br/>
            2 : Return detailed information about user accounts, including authorization levels and logon information. The bufptr parameter points to an array of USER_INFO_2 structures.<br/>
            3 : Return detailed information about user accounts, including authorization levels, logon information, RIDs for the user and the primary group, and profile information. The bufptr parameter points to an array of USER_INFO_3 structures.<br/>
            10 : Return user and account names and comments. The bufptr parameter points to an array of USER_INFO_10 structures.<br/>
            11 : Return detailed information about user accounts. The bufptr parameter points to an array of USER_INFO_11 structures.<br/>
            20 : Return the user's name and identifier and various account attributes. The bufptr parameter points to an array of USER_INFO_20 structures. Note that on Windows XP and later, it is recommended that you use USER_INFO_23 instead.
            </param>
            <param name="filter">A value that specifies the user account types to be included in the enumeration. A value of zero indicates that all normal user, trust data, and machine account data should be included.<br/>
            FILTER_TEMP_DUPLICATE_ACCOUNT : Enumerates account data for users whose primary account is in another domain.This account type provides user access to this domain, but not to any domain that trusts this domain.The User Manager refers to this account type as a local user account.<br/>
            FILTER_NORMAL_ACCOUNT : Enumerates normal user account data. This account type is associated with a typical user.<br/>
            FILTER_INTERDOMAIN_TRUST_ACCOUNT : Enumerates interdomain trust account data. This account type is associated with a trust account for a domain that trusts other domains.<br/>
            FILTER_WORKSTATION_TRUST_ACCOUNT : Enumerates workstation or member server trust account data. This account type is associated with a machine account for a computer that is a member of the domain.<br/>
            FILTER_SERVER_TRUST_ACCOUNT : Enumerates member server machine account data. This account type is associated with a computer account for a backup domain controller that is a member of the domain.
            </param>
            <param name="bufptr">A pointer to the buffer that receives the data. The format of this data depends on the value of the level parameter.</param>
            <param name="prefmaxlen">The preferred maximum length, in bytes, of the returned data. If you specify MAX_PREFERRED_LENGTH, the NetUserEnum function allocates the amount of memory required for the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA.</param>
            <param name="entriesread">A pointer to a value that receives the count of elements actually enumerated.</param>
            <param name="totalentries">A pointer to a value that receives the total number of entries that could have been enumerated from the current resume position. Note that applications should consider this value only as a hint.</param>
            <param name="resumeHandle">A pointer to a value that contains a resume handle which is used to continue an existing user search. The handle should be zero on the first call and left unchanged for subsequent calls. If this parameter is NULL, then no resume handle is stored.</param>
            <returns><see cref="T:Woof.SystemEx.Win32Types.NetApiStatus"/>.</returns>
        </member>
        <member name="M:Woof.SystemEx.Win32Imports.NativeMethods.WTSGetActiveConsoleSessionId">
            <summary>
            Retrieves the session identifier of the console session. The console session is the session that is currently attached to the physical console. Note that it is not necessary that Remote Desktop Services be running for this function to succeed.
            </summary>
            <returns>The session identifier of the session that is attached to the physical console. If there is no session attached to the physical console, (for example, if the physical console session is in the process of being attached or detached), this function returns 0xFFFFFFFF.</returns>
        </member>
        <member name="M:Woof.SystemEx.Win32Imports.NativeMethods.WTSQueryUserToken(System.UInt32,System.IntPtr@)">
            <summary>
            Obtains the primary access token of the logged-on user specified by the session ID. To call this function successfully, the calling application must be running within the context of the LocalSystem account and have the SE_TCB_NAME privilege.
            </summary>
            <param name="SessionId">A Remote Desktop Services session identifier. Any program running in the context of a service will have a session identifier of zero (0). You can use the WTSEnumerateSessions function to retrieve the identifiers of all sessions on a specified RD Session Host server. To be able to query information for another user's session, you need to have the Query Information permission. For more information, see Remote Desktop Services Permissions. To modify permissions on a session, use the Remote Desktop Services Configuration administrative tool.</param>
            <param name="phToken">If the function succeeds, receives a pointer to the token handle for the logged-on user. Note that you must call the CloseHandle function to close this handle.</param>
            <returns>If the function succeeds, the return value is a nonzero value.</returns>
        </member>
        <member name="M:Woof.SystemEx.Win32Imports.NativeMethods.WTSEnumerateSessions(System.IntPtr,System.Int32,System.Int32,System.IntPtr@,System.Int32@)">
            <summary>
            Retrieves a list of sessions on a Remote Desktop Session Host (RD Session Host) server.
            </summary>
            <param name="hServer">A handle to the RD Session Host server.</param>
            <param name="Reserved">This parameter is reserved. It must be zero.</param>
            <param name="Version">The version of the enumeration request. This parameter must be 1.</param>
            <param name="ppSessionInfo">A pointer to an array of WTS_SESSION_INFO structures that represent the retrieved sessions. To free the returned buffer, call the WTSFreeMemory function.</param>
            <param name="pCount">A pointer to the number of WTS_SESSION_INFO structures returned in the ppSessionInfo parameter.</param>
            <returns>Returns zero if this function fails. If this function succeeds, a nonzero value is returned.</returns>
        </member>
        <member name="M:Woof.SystemEx.Win32Imports.NativeMethods.SHGetUserPicturePath(System.String,Woof.SystemEx.Win32Types.GetUserPictureFlags,System.Text.StringBuilder,System.Int32)">
            <summary>
            Copies the users account picture to a temporary directory and returns the path or returns various paths relating to user pictures.
            </summary>
            <param name="name">The name of a user account on this computer, or desired file name of the current users picture. Can be NULL to indicate the current users' name. Must be Microsoft Account Name for Microsoft Accounts.</param>
            <param name="flags">Options, see <see cref="T:Woof.SystemEx.Win32Types.GetUserPictureFlags"/>.</param>
            <param name="path">A pointer to a buffer that receives the path of the copied file. Cannot be NULL.</param>
            <param name="pathLength">Length of the buffer in chars.</param>
        </member>
        <member name="M:Woof.SystemEx.Win32Imports.NativeMethods.SHGetUserPicturePathEx(System.String,Woof.SystemEx.Win32Types.GetUserPictureFlags,System.String,System.Text.StringBuilder,System.Int32,System.Text.StringBuilder,System.Int32)">
            <summary>
            Copies the users account picture to a temporary directory and returns the path or returns various paths relating to user pictures.
            </summary>
            <param name="name">The name of a user account on this computer, or desired file name of the current users picture. Can be NULL to indicate the current users' name. Must be Microsoft Account Name for Microsoft Accounts.</param>
            <param name="flags">Options, see <see cref="T:Woof.SystemEx.Win32Types.GetUserPictureFlags"/>.</param>
            <param name="desiredSrcExt">Desired filetype of the source picture. Defaults to .bmp if NULL is given.</param>
            <param name="path">A pointer to a buffer that receives the path of the copied file. Cannot be NULL.</param>
            <param name="pathLength">Length of the buffer in chars.</param>
            <param name="srcPath">Buffer to which the original path of the users picture is copied.</param>
            <param name="srcLength">Length of the source path buffer in chars.</param>
        </member>
        <member name="M:Woof.SystemEx.Win32Imports.NativeMethods.DuplicateTokenEx(System.IntPtr,System.UInt32,System.IntPtr,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            Creates a new access token that duplicates an existing token. This function can create either a primary token or an impersonation token.
            </summary>
            <param name="ExistingTokenHandle">A handle to an access token opened with TOKEN_DUPLICATE access.</param>
            <param name="dwDesiredAccess">Specifies the requested access rights for the new token. The DuplicateTokenEx function compares the requested access rights with the existing token's discretionary access control list (DACL) to determine which rights are granted or denied. To request the same access rights as the existing token, specify zero. To request all access rights that are valid for the caller, specify MAXIMUM_ALLOWED. For a list of access rights for access tokens, see Access Rights for Access-Token Objects.</param>
            <param name="lpThreadAttributes">A pointer to a SECURITY_ATTRIBUTES structure that specifies a security descriptor for the new token and determines whether child processes can inherit the token. If lpTokenAttributes is NULL, the token gets a default security descriptor and the handle cannot be inherited. If the security descriptor contains a system access control list (SACL), the token gets ACCESS_SYSTEM_SECURITY access right, even if it was not requested in dwDesiredAccess. To set the owner in the security descriptor for the new token, the caller's process token must have the SE_RESTORE_NAME privilege set.</param>
            <param name="TokenType">Specifies one of the following values from the TOKEN_TYPE enumeration.</param>
            <param name="ImpersonationLevel">Specifies a value from the <see cref="T:Woof.SystemEx.Win32Types.SecurityImpersonationLevel"/> enumeration that indicates the impersonation level of the new token.</param>
            <param name="DuplicateTokenHandle">A pointer to a variable that receives a handle to the duplicate token. This handle has TOKEN_IMPERSONATE and TOKEN_QUERY access to the new token. When you have finished using the new token, call the CloseHandle function to close the token handle.</param>
            <returns>True if successfull.</returns>
        </member>
        <member name="M:Woof.SystemEx.Win32Imports.NativeMethods.OpenProcessToken(System.IntPtr,System.Security.Principal.TokenAccessLevels,System.IntPtr@)">
            <summary>
            The OpenProcessToken function opens the access token associated with a process.
            </summary>
            <param name="ProcessHandle">A handle to the process whose access token is opened. The process must have the PROCESS_QUERY_INFORMATION access permission.</param>
            <param name="DesiredAccess">Specifies an access mask that specifies the requested types of access to the access token. These requested access types are compared with the discretionary access control list (DACL) of the token to determine which accesses are granted or denied.</param>
            <param name="TokenHandle">A pointer to a handle that identifies the newly opened access token when the function returns.</param>
            <returns>True if successfull.</returns>
        </member>
        <member name="M:Woof.SystemEx.Win32Imports.NativeMethods.GetTokenInformation(System.IntPtr,Woof.SystemEx.Win32Types.TokenInformationClass,System.IntPtr,System.UInt32,System.UInt32@)">
            <summary>
            The GetTokenInformation function retrieves a specified type of information about an access token. The calling process must have appropriate access rights to obtain the information.
            </summary>
            <param name="TokenHandle">A handle to an access token from which information is retrieved. If TokenInformationClass specifies TokenSource, the handle must have TOKEN_QUERY_SOURCE access. For all other TokenInformationClass values, the handle must have TOKEN_QUERY access.</param>
            <param name="TokenInformationClass">Specifies a value from the TOKEN_INFORMATION_CLASS enumerated type to identify the type of information the function retrieves. Any callers who check the TokenIsAppContainer and have it return 0 should also verify that the caller token is not an identify level impersonation token. If the current token is not an app container but is an identity level token, you should return AccessDenied.</param>
            <param name="TokenInformation">A pointer to a buffer the function fills with the requested information. The structure put into this buffer depends upon the type of information specified by the TokenInformationClass parameter.</param>
            <param name="TokenInformationLength">Specifies the size, in bytes, of the buffer pointed to by the TokenInformation parameter. If TokenInformation is NULL, this parameter must be zero.</param>
            <param name="ReturnLength">A pointer to a variable that receives the number of bytes needed for the buffer pointed to by the TokenInformation parameter. If this value is larger than the value specified in the TokenInformationLength parameter, the function fails and stores no data in the buffer.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Woof.SystemEx.Win32Imports.NativeMethods.CloseHandle(System.IntPtr)">
            <summary>
            Closes an open object handle.
            </summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns></returns>
        </member>
        <member name="M:Woof.SystemEx.Win32Imports.NativeMethods.GetPhysicallyInstalledSystemMemory(System.IntPtr@)">
            <summary>
            Retrieves the amount of RAM that is physically installed on the computer.
            </summary>
            <param name="totalMemoryInKilobytes">A pointer to a variable that receives the amount of physically installed RAM, in kilobytes.</param>
            <returns>If the function succeeds, it returns TRUE and sets the TotalMemoryInKilobytes parameter to a nonzero value.</returns>
        </member>
        <member name="T:Woof.SystemEx.Win32Types.NetApiFilter">
            <summary>
            User account types to be included in the enumeration.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.NetApiFilter.TempDuplicateAccount">
            <summary>
            Enumerates account data for users whose primary account is in another domain. This account type provides user access to this domain, but not to any domain that trusts this domain. The User Manager refers to this account type as a local user account.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.NetApiFilter.NormalAccount">
            <summary>
            Enumerates normal user account data. This account type is associated with a typical user.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.NetApiFilter.InterdomainTrustAccount">
            <summary>
            Enumerates interdomain trust account data. This account type is associated with a trust account for a domain that trusts other domains.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.NetApiFilter.WorkstationTrustAccount">
            <summary>
            Enumerates workstation or member server trust account data. This account type is associated with a machine account for a computer that is a member of the domain.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.NetApiFilter.ServerTrustAccount">
            <summary>
            Enumerates member server machine account data. This account type is associated with a computer account for a backup domain controller that is a member of the domain.
            </summary>
        </member>
        <member name="T:Woof.SystemEx.Win32Types.NetApiStatus">
            <summary>
            The status of the Net API function.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.NetApiStatus.Success">
            <summary>
            Net API function succeeded.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.NetApiStatus.AccessDenied">
            <summary>
            The user does not have access to the requested information.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.NetApiStatus.MoreData">
            <summary>
            More entries are available. Specify a large enough buffer to receive all entries.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.NetApiStatus.BufferTooSmall">
            <summary>
            The return buffer is too small.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.NetApiStatus.InvalidComputer">
            <summary>
            The computer name is invalid.
            </summary>
        </member>
        <member name="T:Woof.SystemEx.Win32Types.SidNameUse">
            <summary>
            The account type associated with the security identifier specified in the lgrmi2_sid member.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.SidNameUse.User">
            <summary>
            The account is a user account.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.SidNameUse.Group">
            <summary>
            The account is a global group account.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.SidNameUse.Domain">
            <summary>
            The account is a well-known group account (such as Everyone). For more information, see Well-Known SIDs.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.SidNameUse.Alias">
            <summary>
            The account is an alias.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.SidNameUse.WellKnownGroup">
            <summary>
            The account is a well-known group account (such as Everyone). For more information, see Well-Known SIDs.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.SidNameUse.DeletedAccount">
            <summary>
            The account has been deleted.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.SidNameUse.Invalid">
            <summary>
            The account is invalid.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.SidNameUse.Unknown">
            <summary>
            The account type cannot be determined.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.SidNameUse.Computer">
            <summary>
            The account is a computer.
            </summary>
        </member>
        <member name="T:Woof.SystemEx.Win32Types.UserFlags">
            <summary>
            Flags for user accounts.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.UserFlags.TempDuplicateAccount">
            <summary>
            This is an account for users whose primary account is in another domain. This account provides user access to this domain, but not to any domain that trusts this domain. The User Manager refers to this account type as a local user account.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.UserFlags.NormalAccount">
            <summary>
            This is a default account type that represents a typical user.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.UserFlags.InterdomainTrustAccount">
            <summary>
            This is a permit to trust account for a domain that trusts other domains.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.UserFlags.WorkstationTrustAccount">
            <summary>
            This is a computer account for a computer that is a member of this domain.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.UserFlags.ServerTrustAccount">
            <summary>
            This is a computer account for a backup domain controller that is a member of this domain.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.UserFlags.DontExpirePassword">
            <summary>
            The password should never expire on the account.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.UserFlags.Script">
            <summary>
            The logon script executed. This value must be set.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.UserFlags.AccountDisable">
            <summary>
            The user's account is disabled.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.UserFlags.HomeDirRequired">
            <summary>
            The home directory is required. This value is ignored.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.UserFlags.PasswordNotRequired">
            <summary>
            No password is required.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.UserFlags.PasswordCantChange">
            <summary>
            The user cannot change the password.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.UserFlags.AccountLockout">
            <summary>
            The account is currently locked out. You can call the NetUserSetInfo function to clear this value and unlock a previously locked account. You cannot use this value to lock a previously unlocked account.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.UserFlags.EncryptedTextPasswordAllowed">
            <summary>
            The user's password is stored under reversible encryption in the Active Directory.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.UserFlags.UserPasswordExpired">
            <summary>
            The user's password has expired.
            </summary>
        </member>
        <member name="T:Woof.SystemEx.Win32Types.GetUserPictureFlags">
            <summary>
            Flags used by SHGetUserPicture and SHGetUserPictureEx shell32 calls.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.GetUserPictureFlags.Directory">
            <summary>
            Make path contain only directory.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.GetUserPictureFlags.DefaultDirectory">
            <summary>
            Make path contain only default pictures directory.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.GetUserPictureFlags.CreatePicturesDir">
            <summary>
            Creates the (default) pictures directory if it doesn't exist.
            </summary>
        </member>
        <member name="T:Woof.SystemEx.Win32Types.SecurityImpersonationLevel">
            <summary>
            Contains values that specify security impersonation levels. Security impersonation levels govern the degree to which a server process can act on behalf of a client process.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.SecurityImpersonationLevel.SecurityAnonymous">
            <summary>
            The server process cannot obtain identification information about the client, and it cannot impersonate the client. It is defined with no value given, and thus, by ANSI C rules, defaults to a value of zero.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.SecurityImpersonationLevel.SecurityIdentification">
            <summary>
            The server process can obtain information about the client, such as security identifiers and privileges, but it cannot impersonate the client. This is useful for servers that export their own objects, for example, database products that export tables and views. Using the retrieved client-security information, the server can make access-validation decisions without being able to use other services that are using the client's security context.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.SecurityImpersonationLevel.SecurityImpersonation">
            <summary>
            The server process can impersonate the client's security context on its local system. The server cannot impersonate the client on remote systems.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.SecurityImpersonationLevel.SecurityDelegation">
            <summary>
            The server process can impersonate the client's security context on remote systems.
            </summary>
        </member>
        <member name="T:Woof.SystemEx.Win32Types.TokenInformationClass">
            <summary>
            Specifies the type of information being assigned to or retrieved from an access token.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenUser">
            <summary>
            The buffer receives a TOKEN_USER structure that contains the user account of the token.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenGroups">
            <summary>
            The buffer receives a TOKEN_GROUPS structure that contains the group accounts associated with the token.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenPrivileges">
            <summary>
            The buffer receives a TOKEN_PRIVILEGES structure that contains the privileges of the token.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenOwner">
            <summary>
            The buffer receives a TOKEN_OWNER structure that contains the default owner security identifier (SID) for newly created objects.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenPrimaryGroup">
            <summary>
            The buffer receives a TOKEN_PRIMARY_GROUP structure that contains the default primary group SID for newly created objects.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenDefaultDacl">
            <summary>
            The buffer receives a TOKEN_DEFAULT_DACL structure that contains the default DACL for newly created objects.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenSource">
            <summary>
            The buffer receives a TOKEN_SOURCE structure that contains the source of the token. TOKEN_QUERY_SOURCE access is needed to retrieve this information.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenType">
            <summary>
            The buffer receives a TOKEN_TYPE value that indicates whether the token is a primary or impersonation token.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenImpersonationLevel">
            <summary>
            The buffer receives a SECURITY_IMPERSONATION_LEVEL value that indicates the impersonation level of the token. If the access token is not an impersonation token, the function fails.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenStatistics">
            <summary>
            The buffer receives a TOKEN_STATISTICS structure that contains various token statistics.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenRestrictedSids">
            <summary>
            The buffer receives a TOKEN_GROUPS structure that contains the list of restricting SIDs in a restricted token.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenSessionId">
            <summary>
            The buffer receives a DWORD value that indicates the Terminal Services session identifier that is associated with the token. 
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenGroupsAndPrivileges">
            <summary>
            The buffer receives a TOKEN_GROUPS_AND_PRIVILEGES structure that contains the user SID, the group accounts, the restricted SIDs, and the authentication ID associated with the token.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenSessionReference">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenSandBoxInert">
            <summary>
            The buffer receives a DWORD value that is nonzero if the token includes the SANDBOX_INERT flag.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenAuditPolicy">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenOrigin">
            <summary>
            The buffer receives a TOKEN_ORIGIN value. 
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenElevationType">
            <summary>
            The buffer receives a TOKEN_ELEVATION_TYPE value that specifies the elevation level of the token.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenLinkedToken">
            <summary>
            The buffer receives a TOKEN_LINKED_TOKEN structure that contains a handle to another token that is linked to this token.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenElevation">
            <summary>
            The buffer receives a TOKEN_ELEVATION structure that specifies whether the token is elevated.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenHasRestrictions">
            <summary>
            The buffer receives a DWORD value that is nonzero if the token has ever been filtered.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenAccessInformation">
            <summary>
            The buffer receives a TOKEN_ACCESS_INFORMATION structure that specifies security information contained in the token.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenVirtualizationAllowed">
            <summary>
            The buffer receives a DWORD value that is nonzero if virtualization is allowed for the token.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenVirtualizationEnabled">
            <summary>
            The buffer receives a DWORD value that is nonzero if virtualization is enabled for the token.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenIntegrityLevel">
            <summary>
            The buffer receives a TOKEN_MANDATORY_LABEL structure that specifies the token's integrity level. 
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenUIAccess">
            <summary>
            The buffer receives a DWORD value that is nonzero if the token has the UIAccess flag set.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenMandatoryPolicy">
            <summary>
            The buffer receives a TOKEN_MANDATORY_POLICY structure that specifies the token's mandatory integrity policy.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.TokenLogonSid">
            <summary>
            The buffer receives the token's logon security identifier (SID).
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenInformationClass.MaxTokenInfoClass">
            <summary>
            The maximum value for this enumeration
            </summary>
        </member>
        <member name="T:Woof.SystemEx.Win32Types.TokenType">
            <summary>
            Contains values that differentiate between a primary token and an impersonation token.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenType.TokenPrimary">
            <summary>
            Indicates a primary token.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.TokenType.TokenImpersonation">
            <summary>
            Indicates an impersonation token.
            </summary>
        </member>
        <member name="T:Woof.SystemEx.Win32Types.WtsConnectState">
            <summary>
            Specifies the connection state of a Remote Desktop Services session.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.WtsConnectState.Active">
            <summary>
            A user is logged on to the WinStation.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.WtsConnectState.Connected">
            <summary>
            The WinStation is connected to the client.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.WtsConnectState.ConnectQuery">
            <summary>
            The WinStation is in the process of connecting to the client.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.WtsConnectState.Shadow">
            <summary>
            The WinStation is shadowing another WinStation.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.WtsConnectState.Disconnected">
            <summary>
            The WinStation is active but the client is disconnected.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.WtsConnectState.Idle">
            <summary>
            The WinStation is waiting for a client to connect.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.WtsConnectState.Listen">
            <summary>
            The WinStation is listening for a connection. A listener session waits for requests for new client connections. No user is logged on a listener session. A listener session cannot be reset, shadowed, or changed to a regular client session.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.WtsConnectState.Reset">
            <summary>
            The WinStation is being reset.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.WtsConnectState.Down">
            <summary>
            The WinStation is down due to an error.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.WtsConnectState.Init">
            <summary>
            The WinStation is initializing.
            </summary>
        </member>
        <member name="T:Woof.SystemEx.Win32Types.WtsSessionInfo">
            <summary>
            Contains information about a client session on a Remote Desktop Session Host (RD Session Host) server.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.WtsSessionInfo.SessionID">
            <summary>
            Session identifier of the session.
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.WtsSessionInfo.WinStationName">
            <summary>
            Pointer to a null-terminated string that contains the WinStation name of this session. The WinStation name is a name that Windows associates with the session, for example, "services", "console", or "RDP-Tcp#0".
            </summary>
        </member>
        <member name="F:Woof.SystemEx.Win32Types.WtsSessionInfo.State">
            <summary>
            A value from the <see cref="T:Woof.SystemEx.Win32Types.WtsConnectState"/> enumeration type that indicates the session's current connection state.
            </summary>
        </member>
        <member name="T:Woof.SystemEx.LocalAccount">
            <summary>
            Represents an existing local Windows account.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.LocalAccount.Name">
            <summary>
            Gets the account name.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.LocalAccount.Domain">
            <summary>
            Gets the domain name.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.LocalAccount.FullName">
            <summary>
            Gets the Windows account FullName property if available.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.LocalAccount.Sid">
            <summary>
            Gets the <see cref="T:System.Security.Principal.SecurityIdentifier"/> of the accouont.
            </summary>
        </member>
        <member name="P:Woof.SystemEx.LocalAccount.IsAdmin">
            <summary>
            Gets the value indicating whether this account is a member of the local administrators group.
            Performs actual check.
            </summary>
        </member>
        <member name="M:Woof.SystemEx.LocalAccount.#ctor(Woof.SystemEx.Win32Types.LocalGroupMember)">
            <summary>
            Creates <see cref="T:Woof.SystemEx.LocalAccount"/> from <see cref="T:Woof.SystemEx.Win32Types.LocalGroupMember"/>.
            </summary>
            <param name="member">Local group member.</param>
        </member>
        <member name="M:Woof.SystemEx.LocalAccount.#ctor(Woof.SystemEx.Win32Types.UserInfo)">
            <summary>
            Creates <see cref="T:Woof.SystemEx.LocalAccount"/> from <see cref="T:Woof.SystemEx.Win32Types.UserInfo"/> object.
            </summary>
            <param name="userInfo">Data structure returned from <see cref="M:Woof.SystemEx.Win32Imports.NativeMethods.NetUserEnum(System.String,System.Int32,Woof.SystemEx.Win32Types.NetApiFilter,System.IntPtr@,System.Int32,System.Int32@,System.Int32@,System.IntPtr)"/> call.</param>
        </member>
        <member name="M:Woof.SystemEx.LocalAccount.#ctor(System.String)">
            <summary>
            Creates <see cref="T:Woof.SystemEx.LocalAccount"/> from the user name (with or without domain).
            </summary>
            <param name="userName">Either domain backslash user, or just user name.</param>
        </member>
        <member name="M:Woof.SystemEx.LocalAccount.#ctor(System.String,System.String)">
            <summary>
            Creates <see cref="T:Woof.SystemEx.LocalAccount"/> from the doman and name.
            </summary>
            <param name="domain">Domain.</param>
            <param name="name">User name.</param>
        </member>
        <member name="M:Woof.SystemEx.LocalAccount.#ctor(System.Security.Principal.SecurityIdentifier)">
            <summary>
            Creates <see cref="T:Woof.SystemEx.LocalAccount"/> from <see cref="T:System.Security.Principal.SecurityIdentifier"/>.
            </summary>
            <param name="sid"><see cref="T:System.Security.Principal.SecurityIdentifier"/>.</param>
        </member>
        <member name="M:Woof.SystemEx.LocalAccount.ToString">
            <summary>
            Returns string representation of the local account.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:Woof.SystemEx.LocalAccount.Equals(System.Object)">
            <summary>
            Equality test depending on SID only.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if SIDs are equal.</returns>
        </member>
        <member name="M:Woof.SystemEx.LocalAccount.GetHashCode">
            <summary>
            Gets the hash code from SID for equality tests.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:Woof.SystemEx.LocalAccount.op_Equality(Woof.SystemEx.LocalAccount,Woof.SystemEx.LocalAccount)">
            <summary>
            Equality test based on SID equality only.
            </summary>
            <param name="a">This one.</param>
            <param name="b">That one.</param>
            <returns>True if SIDs are equal.</returns>
        </member>
        <member name="M:Woof.SystemEx.LocalAccount.op_Inequality(Woof.SystemEx.LocalAccount,Woof.SystemEx.LocalAccount)">
            <summary>
            Inequality test based on SID inequality only.
            </summary>
            <param name="a">This one.</param>
            <param name="b">That one.</param>
            <returns>True if SIDs are NOT equal.</returns>
        </member>
        <member name="T:Woof.SystemEx.WMI">
            <summary>
            Safe, managed WMI queries support.
            </summary>
        </member>
        <member name="M:Woof.SystemEx.WMI.Query(System.String)">
            <summary>
            Queries WMI and returns results as an array of dynamic objects.
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="T:Woof.SystemEx.ManagementObjectExtensions">
            <summary>
            <see cref="T:System.Management.ManagementObject"/> to <see cref="T:System.Dynamic.ExpandoObject"/> conversion class.
            </summary>
        </member>
        <member name="M:Woof.SystemEx.ManagementObjectExtensions.AsDynamic(System.Management.ManagementObject)">
            <summary>
            Returns <see cref="T:System.Management.ManagementObject"/> as <see cref="T:System.Dynamic.ExpandoObject"/>.
            </summary>
            <param name="m"><see cref="T:System.Management.ManagementObject"/>.</param>
            <returns></returns>
        </member>
    </members>
</doc>
